[{"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\index.js":"1","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\App.js":"2","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\Main.styles.js":"3","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\AlgoSigner.js":"4","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\AlgoSigner.styles.js":"5","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\ConnectAlgoSigner.js":"6","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\SignPayTransaction.js":"7","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\CreateAsset.js":"8","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\AssetOptin.js":"9","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Button.styles.js":"10","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Form.style.js":"11","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\constants.js":"12","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\MyAlgoWallet.styles.js":"13","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Header\\header.js":"14","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Header\\MainHeader.styles.js":"15","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\MyAlgoWallet.js":"16","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\Transferfund.js":"17","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\FundWallet.js":"18","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\ConnectButton\\ConnectWalletBtn.js":"19","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\ConnectButton\\index.js":"20"},{"size":262,"mtime":1648234946857,"results":"21","hashOfConfig":"22"},{"size":489,"mtime":1648254480983,"results":"23","hashOfConfig":"22"},{"size":370,"mtime":1648254522707,"results":"24","hashOfConfig":"22"},{"size":809,"mtime":1648254443362,"results":"25","hashOfConfig":"22"},{"size":202,"mtime":1648253868803,"results":"26","hashOfConfig":"22"},{"size":793,"mtime":1648253921543,"results":"27","hashOfConfig":"22"},{"size":3331,"mtime":1648253969919,"results":"28","hashOfConfig":"22"},{"size":2699,"mtime":1648253753362,"results":"29","hashOfConfig":"22"},{"size":2640,"mtime":1648253896869,"results":"30","hashOfConfig":"22"},{"size":876,"mtime":1648254099068,"results":"31","hashOfConfig":"22"},{"size":207,"mtime":1648254073119,"results":"32","hashOfConfig":"22"},{"size":327,"mtime":1648254282257,"results":"33","hashOfConfig":"22"},{"size":297,"mtime":1648253372466,"results":"34","hashOfConfig":"22"},{"size":275,"mtime":1648253372461,"results":"35","hashOfConfig":"22"},{"size":357,"mtime":1648253372460,"results":"36","hashOfConfig":"22"},{"size":2158,"mtime":1648253372465,"results":"37","hashOfConfig":"22"},{"size":1481,"mtime":1648253372467,"results":"38","hashOfConfig":"22"},{"size":1058,"mtime":1648253372464,"results":"39","hashOfConfig":"22"},{"size":734,"mtime":1648253372463,"results":"40","hashOfConfig":"22"},{"size":244,"mtime":1648253372464,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ez5b29",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\index.js",[],["89","90"],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\App.js",["91"],"/*global AlgoSigner*/\n\nimport React from 'react'\nimport Header from './components/Header/header'\nimport MyAlgoWallet from './components/MyAlgoWallet/MyAlgoWallet'\nimport AlgoSigner from './components/AlgoSigner/AlgoSigner'\nimport { Main, MainBody } from './Main.styles' \nimport './assets/css/app.css'\n\nfunction App(){ \n  return(\n    \n    <MainBody>\n      <Header/> \n      <Main>\n        <MyAlgoWallet/>\n        <AlgoSigner/>         \n      </Main>\n    </MainBody>\n  )\n}\n\nexport default App","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\Main.styles.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\AlgoSigner.js",["92"],"/*global AlgoSigner*/\r\nimport React, {useRef} from \"react\";\r\nimport ConnectAlgoSigner from \"./ConnectAlgoSigner\";\r\nimport SignPayTransaction from \"./SignPayTransaction\";\r\nimport { AlgoSignerMain } from \"./AlgoSigner.styles\";\r\nimport CreateAsset from \"./CreateAsset\";\r\nimport AssetOptin from \"./AssetOptin\"\r\n\r\nconst AlgoSigner =  ()  =>{\r\n    const userAccount = useRef()\r\n    const receipient = useRef()\r\n    const amount = useRef()\r\n\r\n    return(\r\n    <AlgoSignerMain>\r\n        <ConnectAlgoSigner userAccount = {userAccount}/>           \r\n        <SignPayTransaction userAccount = {userAccount} amount = {amount} receipient = {receipient} />\r\n        <CreateAsset userAccount = {userAccount} />\r\n        <AssetOptin userAccount = {userAccount} />\r\n    </AlgoSignerMain>\r\n    )\r\n}\r\n\r\nexport default AlgoSigner","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\AlgoSigner.styles.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\ConnectAlgoSigner.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\SignPayTransaction.js",["93","94"],"/*global AlgoSigner*/\r\nimport React,{useState, useRef} from \"react\";\r\nimport { FormStyle } from \"../Form.style\";\r\nimport { TransactionButton } from \"../Button.styles\";\r\nimport { BodyText } from \"../MyAlgoWallet/MyAlgoWallet.styles\";\r\nimport { TOKEN, ALGOD_SERVER, PORT } from \"../../constants\";\r\nconst algosdk = require(\"algosdk\");\r\n\r\nconst SignPayTransaction = ({userAccount, amount, receipient}) => {\r\n    const [isLoading, setLoading] = useState(false)\r\n    \r\n    const MICROALGOS_TO_ALGOS_RATIO = 1e6;\r\n    const INVALID_MICROALGOS_ERROR_MSG =\r\n    'Microalgos should be positive and less than 2^53 - 1.';\r\n\r\n    /**\r\n     * microalgosToAlgos converts microalgos to algos\r\n     * @param microalgos - number\r\n     * @returns number\r\n     */\r\n    const  microalgosToAlgos = (microalgos ) => {\r\n    if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\r\n        throw new Error(INVALID_MICROALGOS_ERROR_MSG);\r\n    }\r\n    return microalgos / MICROALGOS_TO_ALGOS_RATIO;\r\n    }\r\n\r\n    /**\r\n     * algosToMicroalgos converts algos to microalgos\r\n     * @param algos - number\r\n     * @returns number\r\n     */\r\n    const algosToMicroalgos = (algos) => {\r\n    const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\r\n    return Math.round(microalgos);\r\n    }\r\n\r\n    const signPayTransaction = async () =>{\r\n        // await AlgoSigner.connect();\r\n        setLoading(true)\r\n        let client = new algosdk.Algodv2(TOKEN, ALGOD_SERVER, PORT)\r\n        \r\n        //Query Algod to get testnet suggested params\r\n        let suggestedParams = await client.getTransactionParams().do()\r\n\r\n        try{\r\n            const txn = await new algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n                from:  userAccount.current[0].address,\r\n                to: receipient.current,\r\n                // amount:parseInt(amount.current),\r\n                amount : algosToMicroalgos(parseInt(amount.current)),\r\n                // note: \"document.getElementById('note').value\",\r\n                suggestedParams: {...suggestedParams}\r\n              });\r\n              \r\n            // Use the AlgoSigner encoding library to make the transactions base64\r\n              let txn_b64 = AlgoSigner.encoding.msgpackToBase64(txn.toByte());\r\n              \r\n            let signedTxs = await AlgoSigner.signTxn([{txn: txn_b64}])\r\n\r\n            // Get the base64 encoded signed transaction and convert it to binary\r\n            let binarySignedTx = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\r\n\r\n            // Send the transaction through the SDK client\r\n            let id = await client.sendRawTransaction(binarySignedTx).do();\r\n                console.log(id)\r\n                setLoading(false)\r\n        }catch(err){\r\n            console.log(err)\r\n            setLoading(false)\r\n        }  \r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n    <div>\r\n        <div>\r\n            <BodyText>Make Payment</BodyText>\r\n            <FormStyle onChange = {(e) => amount.current = e.target.value} placeholder=\"Amount\" /><br/>\r\n            <FormStyle onChange = {(e) => receipient.current = e.target.value} placeholder=\"Receiver address\" /><br/>\r\n            <TransactionButton backgroundColor onClick ={signPayTransaction}>{isLoading ? \"loading...\": \"Sign Transaction\"}</TransactionButton>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SignPayTransaction","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\CreateAsset.js",["95"],"/*global AlgoSigner*/\r\nimport React, {useRef, useState} from \"react\";\r\nimport { FormStyle } from \"../Form.style\";\r\nimport { TransactionButton } from \"../Button.styles\";\r\nimport { BodyText } from \"../MyAlgoWallet/MyAlgoWallet.styles\";\r\nimport { TOKEN, ALGOD_SERVER, PORT, RECEIVER } from \"../../constants\";\r\nconst algosdk = require(\"algosdk\");\r\n\r\nconst CreateAsset = ({userAccount}) => {\r\n  const assetName = useRef()\r\n  const unitName = useRef()\r\n  const totalUnit = useRef()\r\n  const note = useRef()\r\n  const decimals = useRef()\r\n  const [isLoading, setLoading] = useState(false)\r\n\r\n  const createAsset = async () =>{\r\n    // await AlgoSigner.connect();\r\n    setLoading(true)\r\n    let client =   new algosdk.Algodv2(TOKEN, ALGOD_SERVER, PORT)\r\n            \r\n    //Query Algod to get testnet suggested params\r\n    let txParamsJS = await client.getTransactionParams().do()\r\n\r\n    try{\r\n      const txn = await new algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\r\n        from: userAccount.current[0].address,\r\n        assetName: assetName.current,\r\n        unitName: unitName.current,\r\n        total: +totalUnit.current,\r\n        decimals: +decimals.current,\r\n        note: AlgoSigner.encoding.stringToByteArray(note.current),\r\n        suggestedParams: {...txParamsJS}\r\n      });\r\n      \r\n      const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn.toByte());\r\n\r\n        let signedTxs  = await AlgoSigner.signTxn([{txn: txn_b64}])\r\n        console.log(signedTxs)\r\n\r\n        // Get the base64 encoded signed transaction and convert it to binary\r\n      let binarySignedTx = await AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\r\n\r\n        // Send the transaction through the SDK client\r\n      let id = await client.sendRawTransaction(binarySignedTx).do();\r\n        console.log(id)\r\n        setLoading(false)\r\n\r\n    }catch(err){\r\n      console.log(err)\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return(\r\n  <div>\r\n    <div>\r\n      <BodyText>Create Asset</BodyText>\r\n      <FormStyle onChange = {(e) => assetName.current = e.target.value} placeholder=\"Asset name\" /><br/>\r\n      <FormStyle onChange = {(e) => unitName.current = e.target.value} placeholder=\"Unit name\" /><br/>\r\n      <FormStyle onChange = {(e) => totalUnit.current = e.target.value} placeholder=\"Total units\" /><br/>\r\n      <FormStyle onChange = {(e) => decimals.current = e.target.value} placeholder=\"Decimals\" /><br/>\r\n      <FormStyle onChange = {(e) => note.current = e.target.value} placeholder=\"Enter note\" /><br/>\r\n      <TransactionButton backgroundColor onClick ={createAsset}>{isLoading ? \"loading...\": \"Sign Create Asset\"}</TransactionButton>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default CreateAsset","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\AlgoSigner\\AssetOptin.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Button.styles.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Form.style.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\constants.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\MyAlgoWallet.styles.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Header\\header.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\Header\\MainHeader.styles.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\MyAlgoWallet.js",["96"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport { loadStdlib } from '@reach-sh/stdlib'\r\nimport MyAlgoConnect from '@reach-sh/stdlib/ALGO_MyAlgoConnect';\r\nimport ConnectWalletButton from './ConnectButton/ConnectWalletBtn';\r\nimport TransferFund from './Transferfund';\r\nimport FundAccount from './FundWallet';\r\nimport myalgo from '../../assets/images/myaglo-logo.png'\r\nimport { MyAlgoWalletMain } from './MyAlgoWallet.styles';\r\n\r\nconst reach = loadStdlib(\"ALGO\")\r\n\r\nreach.setWalletFallback(reach.walletFallback({\r\n  providerEnv: 'TestNet', MyAlgoConnect })); \r\n\r\nconst MyAlgoWallet = () => {\r\n\r\n    const account = useRef()\r\n    const balance = useRef()\r\n\r\n\r\n    const [accountBal, setAccountBal] = useState(0);\r\n    const [accountAddress, setAccountAddress] = useState('');\r\n\r\n\r\n    const connectWallet = async () =>{\r\n        try{\r\n            await getAccount()\r\n            await getBalance()\r\n                \r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const getAccount = async () => {\r\n        try{\r\n           account.current = await reach.getDefaultAccount()\r\n            setAccountAddress(account.current.networkAccount.addr)\r\n            console.log(\"Account :\" + account.current.networkAccount.addr)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const getBalance = async () => {\r\n        try{\r\n              let rawBalance = await reach.balanceOf(account.current)\r\n                balance.current = reach.formatCurrency(rawBalance, 4)\r\n                setAccountBal(balance.current)\r\n            console.log(\"Balance :\" + balance.current)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n      \r\n    }\r\n\r\n    return(\r\n        <MyAlgoWalletMain>\r\n            <img src= {myalgo} alt=\"My Algo\" height= \"70px\"/>\r\n            <ConnectWalletButton accountAddress={accountAddress} connectWallet = {connectWallet} accountBal = {accountBal}/>\r\n            <TransferFund account = {account} getBalance = {getBalance} />\r\n            <FundAccount account = {account} getBalance = {getBalance}/>\r\n        </MyAlgoWalletMain>\r\n    )\r\n}\r\n\r\nexport default MyAlgoWallet","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\Transferfund.js",["97"],"import React, {useRef, useState} from \"react\";\r\nimport { loadStdlib } from '@reach-sh/stdlib'\r\nimport { FormStyle } from \"../Form.style\";\r\nimport { Button, TransactionButton } from \"../Button.styles\";\r\nimport { BodyText } from \"./MyAlgoWallet.styles\";\r\n\r\nconst reach = loadStdlib(\"ALGO\")\r\n\r\nconst TransferFund = ({account, getBalance}) => {\r\n    const transferAmount = useRef()\r\n    const receiverAddress = useRef()\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const transferFund = async () =>{\r\n        try{\r\n        setLoading(true)\r\n        const receiver = await reach.connectAccount({\r\n             addr: receiverAddress.current\r\n         })\r\n         console.log(receiver)\r\n \r\n         await reach.transfer(account.current, receiver, reach.parseCurrency(transferAmount.current))\r\n         await getBalance()\r\n         setLoading(false)\r\n        }catch(err){\r\n            console.log(err)\r\n            setLoading(false)\r\n        }\r\n        \r\n\r\n     }\r\n\r\n    return(\r\n        <div>\r\n            <br/>\r\n            <BodyText>Transfer Fund</BodyText>\r\n            <FormStyle onChange = {(e) => receiverAddress.current = e.target.value} placeholder=\"Receiver address\" /><br/>\r\n            <FormStyle onChange = {(e) => transferAmount.current = e.target.value} placeholder=\"Amount\" /><br/>\r\n            <TransactionButton onClick ={transferFund}>{isLoading ? \"loading...\": \"Transfer Fund\"}</TransactionButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransferFund","C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\FundWallet.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\ConnectButton\\ConnectWalletBtn.js",[],"C:\\Users\\bzrra\\OneDrive\\Documentos\\Cripto\\George Brown\\Advanced Blockchain\\Algorand\\nft-minter-algorand-dapp\\nft-minter\\src\\components\\MyAlgoWallet\\ConnectButton\\index.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":10,"nodeType":"104","messageId":"105","endLine":1,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":1,"column":10,"nodeType":"104","messageId":"105","endLine":1,"endColumn":20},{"ruleId":"102","severity":1,"message":"106","line":2,"column":25,"nodeType":"107","messageId":"105","endLine":2,"endColumn":31},{"ruleId":"102","severity":1,"message":"108","line":21,"column":12,"nodeType":"107","messageId":"105","endLine":21,"endColumn":29},{"ruleId":"102","severity":1,"message":"109","line":6,"column":37,"nodeType":"107","messageId":"105","endLine":6,"endColumn":45},{"ruleId":"102","severity":1,"message":"110","line":1,"column":26,"nodeType":"107","messageId":"105","endLine":1,"endColumn":35},{"ruleId":"102","severity":1,"message":"111","line":4,"column":10,"nodeType":"107","messageId":"105","endLine":4,"endColumn":16},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'AlgoSigner' is defined but never used.","Program","unusedVar","'useRef' is defined but never used.","Identifier","'microalgosToAlgos' is assigned a value but never used.","'RECEIVER' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]